//***************************************************************************************
//*************  Copyright (C) 2006 - Patrick Bellasi ***********************************
//***************************************************************************************
//**
//** The copyright to the computer programs here in is the property of
//** Patrick Bellasi. The programs may be used and/or copied only with the
//** written permission from the author or in accordance with the terms and
//** conditions stipulated in the agreement/contract under which the
//** programs have been supplied.
//**
//***************************************************************************************
//******************** Module information ***********************************************
//**
//** Project:       ControlBox (0.1)
//** Description:   ModuleDescription
//**
//** Filename:      Filename
//** Owner:         Patrick Bellasi
//** Creation date:  21/06/2006
//**
//***************************************************************************************
//******************** Revision history *************************************************
//** Revision Date       Comments                           Responsible
//** -------- ---------- ---------------------------------------------------- -----------------------------
//**
//**
//***************************************************************************************


#ifndef _EVENTDISPATCHER_H
#define _EVENTDISPATCHER_H

#include <controlbox/base/Object.h>
#include <controlbox/base/comsys/Dispatcher.h>
#include <controlbox/base/Utility.h>

namespace controlbox {
namespace comsys {


/// A simple Dispatcher.
/// An EventDispatcher is a simple Dispatcher that bind a Generator to an Handler
/// in order to notify the last one about events generated by the first.
///
class EventDispatcher : public Object, public Dispatcher {

protected:

    /// Set to TRUE to suspend events dispatching
    bool d_suspended;

    /// While in suspended state, the number of events waiting to be notified.
    unsigned int d_waiting;

    /// The linked handler
    Handler * d_handler;


public:

    /// Build a new EventDispatcher linked to a defined handler and, if not otherwise requested,
    /// by default suspended
    EventDispatcher(Handler * handler = 0, bool suspended = true, std::string const & logName = "EventDispatcher");

    //
    ~EventDispatcher();

    /// Define the Handler to witch dispatch new events and, if not
    /// otherwise specified, by default activate the dispatcher.
    exitCode setHandler(Handler * handler, bool suspended = false);

    /// Enable events dispatching
    /// Enable the dispatching of new events and, by default,
    /// dispatche all queued events. Otherwise queued events are flushed.
    /// @param discard set to true to discard queued messages while in suspended state (default flase)
    /// @return Core::OK on success, Core::GEN_NO_HANDLER if there's not handlers defined
    exitCode resume(bool discard = false);

    /// Suspend events notifications
    /// New events are not dispetched but still counted for, eventually,
    /// delayed notification.
    /// @return Core::OK
    exitCode suspend();

    /// If not suspended, dispatch an event to the associated EventHandler.
    /// Otherwise the event is counted for future dispatching.
    exitCode dispatchEvent(bool clean = true);

protected:

    /// In this implementation of Dispatcher this method is simply
    /// an empty one doing noting
    inline exitCode dispatchCommand(Command * command, bool clean = true) {
        return OK;
    }

};

} //namespace comsys
} //namespace controlbox
#endif
